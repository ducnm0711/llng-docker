--- a/usr/share/perl5/Lemonldap/NG/Common/Apache/Session/Serialize/JSON.pm
+++ b/usr/share/perl5/Lemonldap/NG/Common/Apache/Session/Serialize/JSON.pm
@@ -38,9 +38,16 @@ sub _unserialize {
     my $tmp;
     eval { $tmp = from_json( $serialized, { allow_nonref => 1 } ) };
     if ($@) {
-        require Storable;
-        $next ||= \&Storable::thaw;
-        return &$next($serialized);
+        eval {
+            require Storable;
+            $next ||= \&Storable::thaw;
+            return &$next($serialized);
+        };
+        if ($@) {
+
+            # Error is catched in unserialize
+            return undef;
+        }
     }
     return $tmp;
 }
--- a/usr/share/perl5/Lemonldap/NG/Common/Apache/Session/Store.pm
+++ b/usr/share/perl5/Lemonldap/NG/Common/Apache/Session/Store.pm
@@ -17,7 +17,7 @@ sub insert {
 
     # Store session in cache
     my $id = $session->{data}->{_session_id};
-    $self->cache->set( $id, $session->{serialized} );
+    $self->storeInCache( $id, $session->{serialized} );
 
     # Store in session backend
     return $self->module->insert($session);
@@ -36,8 +36,8 @@ sub update {
 
         # Update session in cache
         my $id = $session->{data}->{_session_id};
-        $self->cache->remove($id) if ( $self->cache->get($id) );
-        $self->cache->set( $id, $session->{serialized} );
+        $self->removeFromCache($id) if ( $self->getFromCache($id) );
+        $self->storeInCache( $id, $session->{serialized} );
     }
 
     unless ( defined( $session->{args}->{updateCache} )
@@ -56,16 +56,23 @@ sub materialize {
 
     # Get session from cache
     my $id = $session->{data}->{_session_id};
-    if ( !$self->{args}->{noCache} and $self->cache->get($id) ) {
-        $session->{serialized} = $self->cache->get($id);
-        return;
+    if ( !$self->{args}->{noCache} and $self->getFromCache($id) ) {
+        $session->{serialized} = $self->getFromCache($id);
+        eval { JSON::from_json( $session->{serialized} ); };
+        if ($@) {
+            print STDERR "Local data corrupted, ignore session\n";
+            $session->{serialized} = undef;
+        }
+        else {
+            return;
+        }
     }
 
     # Get session from backend
     $self->module->materialize($session);
 
     # Store session in cache
-    $self->cache->set( $id, $session->{serialized} );
+    $self->storeInCache( $id, $session->{serialized} );
 
     return;
 }
@@ -83,7 +90,7 @@ sub remove {
 
         # Remove session from cache
         my $id = $session->{data}->{_session_id};
-        $self->cache->remove($id) if ( $self->cache->get($id) );
+        $self->removeFromCache($id) if ( $self->getFromCache($id) );
     }
 
     unless ($session->{args}->{updateCache}
@@ -120,4 +127,16 @@ sub cache {
     return $self->{cache};
 }
 
+sub storeInCache { _cache_call( 'set', @_ ); }
+
+sub getFromCache { _cache_call( 'get', @_ ); }
+
+sub removeFromCache { _cache_call( 'remove', @_ ); }
+
+sub _cache_call {
+    my ( $sub, $self, @args ) = @_;
+    eval { $self->cache->$sub(@args); };
+    print STDERR "Unable to use cache: $@\n" if $@;
+}
+
 1;
