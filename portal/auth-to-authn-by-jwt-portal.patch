--- a/usr/share/perl5/Lemonldap/NG/Portal/Issuer/OpenIDConnect.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Issuer/OpenIDConnect.pm
@@ -359,12 +359,18 @@ sub run {
                 }
             }
 
+            my $authMethod;
             if ( $oidc_request->{'request'} ) {
-                if ( my $request =
+                if ( my ( $request, $alg ) =
                     $self->decodeJWT( $oidc_request->{'request'}, undef, $rp ) )
                 {
                     $self->logger->debug("JWT signature request verified");
 
+                    $authMethod =
+                      $alg =~ /^HS/i
+                      ? 'client_secret_jwt'
+                      : 'private_key_jwt';
+
                     # Override OIDC parameters by request content
                     foreach ( keys %$request ) {
                         $self->logger->debug( "Override $_ OIDC param"
@@ -468,6 +474,39 @@ sub run {
                 );
             }
 
+            # Check if authentication was required
+            if ( $self->rpOptions->{$rp}
+                ->{oidcRPMetaDataOptionsAuthRequiredForAuthorize} )
+            {
+                $self->logger->debug('JWS authentication is required');
+                unless ($authMethod) {
+                    $self->userLogger->error(
+                        'Authentication required but not done');
+                    return $self->returnRedirectError(
+                        $req,           $oidc_request->{'redirect_uri'},
+                        'server_error', 'JWS authentication required',
+                        undef,          $oidc_request->{'state'},
+                        1
+                    );
+                }
+                my $methodAllowed =
+                  $self->rpOptions->{$rp}->{oidcRPMetaDataOptionsAuthMethod};
+                if ( $methodAllowed and $authMethod ne $methodAllowed ) {
+                    $self->userLogger->error(
+"Authentication with $authMethod instead of $methodAllowed"
+                    );
+                    return $self->returnRedirectError(
+                        $req,
+                        $oidc_request->{'redirect_uri'},
+                        'server_error',
+                        "Authentication must use $methodAllowed",
+                        undef,
+                        $oidc_request->{'state'},
+                        1
+                    );
+                }
+            }
+
             my $spAuthnLevel =
               $self->rpOptions->{$rp}->{oidcRPMetaDataOptionsAuthnLevel} || 0;
 
--- a/usr/share/perl5/Lemonldap/NG/Portal/Lib/OpenIDConnect.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Lib/OpenIDConnect.pm
@@ -424,6 +424,8 @@ sub getCallbackUri {
 # return String Authentication Request URI
 sub buildAuthorizationCodeAuthnRequest {
     my ( $self, $req, $op, $state, $nonce ) = @_;
+    my $authMode =
+      $self->opOptions->{$op}->{oidcOPMetaDataOptionsAuthnEndpointAuthMethod};
 
     my $authorize_uri =
       $self->opMetadata->{$op}->{conf}->{authorization_endpoint};
@@ -445,13 +447,15 @@ sub buildAuthorizationCodeAuthnRequest {
     my $ui_locales = $self->opOptions->{$op}->{oidcOPMetaDataOptionsUiLocales};
     my $acr_values = $self->opOptions->{$op}->{oidcOPMetaDataOptionsAcrValues};
 
-    my $authorize_request_params = {
+    my $authorize_request_oauth2_params = {
         response_type => $response_type,
         client_id     => $client_id,
         scope         => $scope,
         redirect_uri  => $redirect_uri,
-        ( defined $state      ? ( state      => $state )      : () ),
-        ( defined $nonce      ? ( nonce      => $nonce )      : () ),
+        ( defined $state ? ( state => $state ) : () ),
+        ( defined $nonce ? ( nonce => $nonce ) : () ),
+    };
+    my $authorize_request_params = {
         ( defined $display    ? ( display    => $display )    : () ),
         ( defined $prompt     ? ( prompt     => $prompt )     : () ),
         ( $max_age            ? ( max_age    => $max_age )    : () ),
@@ -466,10 +470,38 @@ sub buildAuthorizationCodeAuthnRequest {
     );
     return if ( $h != PE_OK );
 
+    if ( $authMode and $authMode =~ /^jw(?:s|e)$/ ) {
+        my $aud = $authorize_uri;
+        $aud =~ s#^(https://[^/]*).*?$#$1#;
+        my $jwt = $self->createJWTForOP( {
+                iss => $client_id,
+                aud => $aud,
+                jti => $self->generateNonce,
+                exp => time + 30,
+                iat => time,
+                %$authorize_request_oauth2_params,
+                %$authorize_request_params,
+            },
+            $self->opOptions->{op}
+              ->{oidcOPMetaDataOptionsAuthnEndpointAuthSigAlg} || 'RS256',
+            $op
+        );
+        if ($jwt) {
+            $authorize_request_params = { request => $jwt };
+            if ( $authMode eq 'jwe' ) {
+                $self->logger->error('jwe mode not yet implemented');
+            }
+        }
+        else {
+            $self->logger->error(
+                'Unable to generate JWT, continue with unauthenticated query');
+        }
+    }
     my $authn_uri =
         $authorize_uri
       . ( $authorize_uri =~ /\?/ ? '&' : '?' )
-      . build_urlencoded(%$authorize_request_params);
+      . build_urlencoded( %$authorize_request_oauth2_params,
+        %$authorize_request_params );
 
     $self->logger->debug(
         "OpenIDConnect Authorization Code Flow Authn Request: $authn_uri");
