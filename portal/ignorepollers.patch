--- a/usr/share/perl5/Lemonldap/NG/Portal/Main/Plugins.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Main/Plugins.pm
@@ -38,6 +38,7 @@ our @pList = (
     checkHIBP                           => '::Plugins::CheckHIBP',
     checkEntropy                        => '::Plugins::CheckEntropy',
     initializePasswordReset             => '::Plugins::InitializePasswordReset',
+    ignorePollers                       => '::Plugins::IgnorePollers',
     adaptativeAuthenticationLevelRules  =>
       '::Plugins::AdaptativeAuthenticationLevel',
     refreshSessions     => '::Plugins::Refresh',
--- /dev/null
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Plugins/IgnorePollers.pm
@@ -0,0 +1,109 @@
+package Lemonldap::NG::Portal::Plugins::IgnorePollers;
+
+use strict;
+use Mouse;
+use JSON;
+
+use Lemonldap::NG::Portal::Main::Constants qw(
+  PE_OK
+  PE_SENDRESPONSE
+);
+
+our $VERSION = '2.19.0';
+
+extends 'Lemonldap::NG::Portal::Main::Plugin';
+
+# Entrypoint
+use constant beforeAuth => 'check';
+
+has lastCall => (
+    is      => 'rw',
+    default => sub { {} },
+);
+
+has maxSameCall => (
+    is      => 'rw',
+    default => 5,
+);
+
+has timeout => (
+    is      => 'rw',
+    default => 300,
+);
+
+use constant HeaderToKeep => qw(
+  HTTP_X_FORWARDED_FOR
+  HTTP_USER_AGENT
+  REQUEST_METHOD
+  REQUEST_URI
+  QUERY_STRING
+);
+
+sub init {
+    my ($self) = @_;
+    $self->maxSameCall( $self->conf->{ignorePollersLimit} )
+      if $self->conf->{ignorePollersLimit};
+    $self->timeout( $self->conf->{ignorePollersDelay} )
+      if $self->conf->{ignorePollersDelay};
+    $self->addUnauthRoute( 'resetip.js' => 'resetScript' );
+    return 1;
+}
+
+sub check {
+    my ( $self, $req ) = @_;
+    my $nb = $self->setCall($req);
+    return PE_OK if $nb < $self->maxSameCall;
+    $req->response(
+          $req->wantJSON
+        ? $self->sendJSONresponse( $req, { status => "ok" } )
+        : [
+            200,
+            [],
+            [
+'<html><body><script src="/resetip.js?reload"></script><a href="/?cancel=1">Go to portal</a></body></html>'
+            ]
+        ]
+    );
+    return PE_SENDRESPONSE;
+}
+
+sub setCall {
+    my ( $self, $req ) = @_;
+    my $ip = $req->address;
+    $self->lastCall->{$ip} //= {};
+    if (   $self->lastCall->{$ip}->{'time'}
+        && $self->lastCall->{$ip}->{'time'} < time - $self->timeout )
+    {
+        $self->lastCall->{$ip} = {};
+    }
+    my $url = $self->_fingerprint($req);
+    if ( $url ne $self->lastCall->{$ip}->{url} ) {
+        $self->lastCall->{$ip}->{url} = $url;
+        $self->lastCall->{$ip}->{nb}  = 1;
+    }
+    else {
+        $self->lastCall->{$ip}->{nb}++;
+    }
+
+    $self->lastCall->{$ip}->{'time'} = time;
+    return $self->lastCall->{$ip}->{nb};
+}
+
+sub resetScript {
+    my ( $self, $req ) = @_;
+    $self->setCall($req);
+    return [
+        200,
+        [ 'Content-Type' => 'applications/javascript' ],
+        ['console.log("reset poller")']
+    ];
+}
+
+sub _fingerprint {
+    my ($self, $req) = @_;
+    my $ret = '';
+    $ret .= ($req->env->{$_} // '') foreach (HeaderToKeep);
+    return $ret;
+}
+
+1;
