#!/usr/bin/perl

use strict;
use Lemonldap::NG::Common::Conf;
use JSON;

my $confAcc = Lemonldap::NG::Common::Conf->new( {} );
my $cfgNum  = $confAcc->lastCfg();
my $conf    = $confAcc->getConf( { cfgNum => $cfgNum, noCache => 1 } );
delete $conf->{cipher};
if ( $ARGV[0] eq 'get' ) {
    if ( ref $conf->{ $ARGV[1] } ) {
        print JSON::to_json( $conf->{ $ARGV[1] } );
    }
    else {
        print $conf->{ $ARGV[1] } . "\n";
    }
}
elsif ( $ARGV[0] eq 'set' ) {
    if ( $conf->{ $ARGV[1] } ne $ARGV[2] ) {
        print STDERR "Key $ARGV[1] updated from "
          . $conf->{ $ARGV[1] }
          . " to $ARGV[2]\n";
        if ( $ARGV[2] =~ /^[\{\[].*[\]\}]$/ ) {
            $ARGV[2] = eval { JSON::from_json( $ARGV[2] ) };
            die "Bad value for $ARGV[1]: $@" if $@;
        }
        $conf->{ $ARGV[1] } = $ARGV[2];
        my $res = $confAcc->saveConf( $conf, force => 1, cfgNumFixed => 1 );
    }
}
elsif ( $ARGV[0] eq 'setDomain' ) {
    my $currentDomain = $conf->{domain};
    print STDERR "Current domain: $currentDomain\n";
    my $newDomain = $ARGV[1];
    if ( $newDomain and ( $newDomain ne $currentDomain ) ) {
        print STDERR "New domain: $newDomain\n";
        delete $conf->{cipher};
        my $content = JSON::to_json($conf);
        $content =~ s/\.\Q$currentDomain\E/\.$newDomain/g;
        $conf = JSON::from_json($content);
        $conf->{domain} = $newDomain;
        my $res = $confAcc->saveConf( $conf, force => 1, cfgNumFixed => 1 );
    }
}
else {
    die "Unknown command: '$ARGV[1]'";
}
